#!/usr/bin/env node

/** 
 * 
 * Include AppDynamics hooks
 * 
 * For every Node.js application that you are instrumenting, 
 * insert the following call in the application source code at the first line of the main module (such as the server.js file), before any other require statements: 
 */

require("appdynamics").profile({
        controllerHostName: 'paid51.saas.appdynamics.com',
        controllerPort: 443, // If SSL, be sure to enable the next line     controllerSslEnabled: true, // Optional - use if connecting to controller via SSL
        accountName: 'RegisUniversityCorporation',
        accountAccessKey: 'hhznona9phpo',
        applicationName: 'MeanJSHelloWorld',
        tierName: 'NodeJs1',
        nodeName: 'process' // The controller will automatically append the node name with a unique number
    });

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('MeanJsHelloworld:server');
var http = require('http');

var fs;
fs = require('fs');

var configPort; 
try {
    var configData = fs.readFileSync('./config/runConfig.json');
    var configuration = JSON.parse(configData);
    configPort = configuration.port;
    console.log("Found port %s", configPort);
} catch (e) {
    configPort = 8082;
}



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || configPort);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
